name: Deploy Angular App to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: e-commerce-front-end
  ECS_SERVICE: angular-frontend-service
  ECS_CLUSTER: ecommerce-frontend
  ECS_TASK_DEFINITION: angular-frontend-task.json
  CONTAINER_NAME: angular-frontend

jobs:
  deploy:
    name: Build and Deploy Angular
    runs-on: ubuntu-latest

    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: üì¶ Install Dependencies
        run: npm install

      - name: üèóÔ∏è Build Angular App
        run: npm run build --prod

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üì¶ Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: üìù Fill in New Image ID in ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: üöÄ Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true
